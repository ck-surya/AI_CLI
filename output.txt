Contents of genrative/src//callAPI.js:
// src/callAPI.js

// Use environment variables for the API key (this requires a .env file or environment configuration)
require('dotenv').config();  // Load environment variables from .env file (use npm install dotenv)

const fetch = require('node-fetch');  // Ensure you have node-fetch or use built-in fetch if available in your environment

// Function to call Gemini API
async function callGeminiAPI(promptText) {
    const apiKey = process.env.GEMINI_API_KEY;  // Securely retrieve the API key from environment variables

    if (!apiKey) {
        throw new Error('API key is missing. Please set GEMINI_API_KEY in your environment variables.');
    }

    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`;

    const requestData = {
        contents: [{
            parts: [{
                text: promptText
            }]
        }]
    };

    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        });

        if (!response.ok) {
            throw new Error(`API request failed with status ${response.status} and message: ${response.statusText}`);
        }

        const data = await response.json();
        return data;  // Return the response data from the API

    } catch (error) {
        console.error('Error calling the Gemini API:', error);
        throw error;  // Optionally, rethrow the error to be handled by the caller
    }
}

module.exports = callGeminiAPI;



Contents of genrative/src//processFile.js:
// src/processFile.js

const readInputFile = require('./readInput');
const callGeminiAPI = require('./callAPI');
const writeOutputToFile = require('./writeOutput');

// Main function to orchestrate the process
async function processFile(inputFilePath, outputFilePath) {
    try {
        // Step 1: Read input text from file
        const inputText = await readInputFile(inputFilePath);
        console.log('Input text:', inputText);

        // Step 2: Call Gemini API with the input text
        const apiResponse = await callGeminiAPI(inputText);
        console.log('API Response:', apiResponse);

        // Step 3: Get the generated text from API response
        const outputText = apiResponse?.choices?.[0]?.text || 'No valid response from API';

        // Step 4: Write output to the file
        await writeOutputToFile(outputText, outputFilePath);
        console.log('Process completed successfully!');
    } catch (error) {
        console.error('Error in processing:', error);
    }
}

module.exports = processFile;



Contents of genrative/src//readInput.js:
// src/readInput.js

const fs = require('fs');

// Function to read input from file
function readInputFile(inputFilePath) {
    return new Promise((resolve, reject) => {
        fs.readFile(inputFilePath, 'utf8', (err, data) => {
            if (err) {
                reject('Error reading input file: ' + err);
            } else {
                resolve(data);
            }
        });
    });
}

module.exports = readInputFile;



Contents of genrative/src//writeOutput.js:
// src/writeOutput.js

const fs = require('fs');

// Function to write the output to a file
function writeOutputToFile(output, outputFilePath) {
    return new Promise((resolve, reject) => {
        fs.writeFile(outputFilePath, output, 'utf8', (err) => {
            if (err) {
                reject('Error writing output file: ' + err);
            } else {
                resolve('Output saved to ' + outputFilePath);
            }
        });
    });
}

module.exports = writeOutputToFile;



